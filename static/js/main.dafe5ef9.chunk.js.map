{"version":3,"sources":["components/Title.jsx","components/RoomBtn.jsx","components/ExistingRooms.jsx","components/PlusBtn.jsx","components/HomePage.jsx","components/ColorPick.jsx","components/AddRoom.jsx","components/AddDeviceBtn.jsx","components/SelectDevice.jsx","components/DeviceBtn.jsx","components/Room.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","to","id","RoomBtn","roomValue","path","style","backgroundColor","color","slice","length","rgb","i","temp","parseInt","lastIndexOf","fontColor","boxShadow","name","ExistingRooms","roomList","map","element","index","PlusBtn","HomePage","ColorPick","animate","window","location","href","requestAnimationFrame","createCanvas","canvas","refs","ctx","getContext","clearRect","innerWidth","innerHeight","x","y","width","height","grd","createLinearGradient","addColorStop","fillStyle","fillRect","updateColor","str","getPixelValue","event","clientX","clientY","rect","target","getBoundingClientRect","left","top","pixelData","getImageData","data","rgba","state","this","ref","borderRadius","onClick","Component","AddRoom","useState","room","setRoom","setName","setColor","onChange","e","value","disabled","selected","hidden","maxLength","placeholder","type","found","list","alert","addToRoomsList","AddDeviceBtn","changeRenderState","SelectDevice","deviceToAdd","setDeviceToAdd","content","devices","count","device","moreThanOneStereo","addDevice","DeviceBtn","onOff","active","Room","toRender","setToRender","newRender","roomVal","App","setRoomList","roomIndex","deviceIndex","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0fAIe,SAASA,EAAMC,GAE1B,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CAAMC,GAAG,KAAI,4BAAQC,GAAG,WAAX,kB,YCJV,SAASC,EAAQJ,GAqB5B,OACI,yBAAKC,UAAU,WACX,kBAAC,IAAD,CAAMC,GAAIF,EAAMK,UAAUC,MAAO,4BAAQC,MAAO,CAACC,gBAAgBR,EAAMK,UAAUI,MAAMA,MArB/E,WAGZ,IAFA,IAAIA,EAAQ,IAAKT,EAAMK,UAAUI,MAAMC,MAAM,EAAEV,EAAMK,UAAUI,MAAME,OAAO,GACxEC,EAAM,GACFC,EAAG,EAAGA,EAAI,EAAEA,IAAI,CACpB,IAAIC,EAAOC,SAASN,EAAMC,MAAMD,EAAMO,YAAY,KAAK,EAAEP,EAAME,SAC/DF,EAAQA,EAAMC,MAAM,EAAED,EAAMO,YAAY,MACxCJ,EAAG,CAAIE,GAAJ,mBAAYF,IAEnB,OAAIA,EAAI,GAAGA,EAAI,GAAGA,EAAI,GAAM,IACjB,QAEA,QAUsFK,GAAYC,UALtG,mBAAmBlB,EAAMK,UAAUI,OAKgGR,UAAU,WAAWD,EAAMK,UAAUc,QCtBxK,SAASC,EAAcpB,GAClC,OACI,yBAAKC,UAAU,iBACVD,EAAMqB,SAASC,KAAI,SAACC,EAAQV,GAC7B,OAAO,kBAAC,EAAD,CAASW,MAAOX,EAAGR,UAAWkB,Q,YCLlC,SAASE,IACpB,OACI,yBAAKxB,UAAU,WACX,kBAAC,IAAD,CAAMC,GAAG,YAAW,4BAAQD,UAAU,WAAlB,OCFjB,SAASyB,EAAS1B,GAE7B,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAeoB,SAAUrB,EAAMqB,YAEnC,yBAAKpB,UAAU,UACX,kBAAC,EAAD,Q,kECRK0B,G,kBAEjB,WAAY3B,GAAO,IAAD,8BACd,4CAAMA,KAcV4B,QAAU,WACyF,aAA5FC,OAAOC,SAASC,KAAKrB,MAAOmB,OAAOC,SAASC,KAAKpB,OAAO,EAAGkB,OAAOC,SAASC,KAAKpB,UAC/EqB,sBAAsB,EAAKJ,SAC3B,EAAKK,iBAlBK,EAsBlBA,aAAc,WAEd,IAAIC,EAAS,EAAKC,KAAKD,OACnBE,EAAMF,EAAOG,WAAW,MAC5BD,EAAIE,UAAU,EAAE,EAAET,OAAOU,WAAWV,OAAOW,aAC3C,IAAIC,EAAI,GAAIZ,OAAOU,WACfG,EAAI,GAAIb,OAAOW,YACnBN,EAAOS,MAAQF,EACfP,EAAOU,OAAQF,EACf,IAAIG,EAAMT,EAAIU,qBAAqB,EAAE,EAAEL,EAAEC,GACzCG,EAAIE,aAAa,EAAG,SACpBF,EAAIE,aAAa,IAAM,QACvBF,EAAIE,aAAa,GAAK,SACtBF,EAAIE,aAAa,GAAK,QACtBF,EAAIE,aAAa,GAAK,OACtBF,EAAIE,aAAa,GAAK,UACtBF,EAAIE,aAAa,GAAK,UACtBF,EAAIE,aAAa,GAAK,SACtBF,EAAIE,aAAa,GAAK,kBACtBF,EAAIE,aAAa,GAAK,UACtBF,EAAIE,aAAa,GAAK,QACtBF,EAAIE,aAAa,EAAG,SACpBX,EAAIY,UAAYH,EAChBT,EAAIa,SAAS,EAAE,EAAER,EAAEC,IA7CD,EAiDlBQ,YAAY,SAACC,GACT,EAAKnD,MAAMkD,YAAYC,IAlDT,EAqDlBC,cAAgB,SAACC,GAEb,IAAIZ,EAAIY,EAAMC,QACVZ,EAAIW,EAAME,QACVC,EAAOH,EAAMI,OAAOC,wBACxBjB,GAAKe,EAAKG,KACVjB,GAAKc,EAAKI,IACVnB,EAAI1B,SAAS0B,GACbC,EAAE3B,SAAS2B,GACX,IAAImB,EAAYR,EAAMI,OAAOpB,WAAW,MAAMyB,aAAarB,EAAGC,EAAG,EAAG,GAAGqB,KACnEC,EAAO,OAAOH,EAAU,GAAG,IAAIA,EAAU,GAAG,IAAIA,EAAU,GAAG,IACjE,EAAKX,YAAYc,IA9DjB,EAAKC,MAAM,GAFG,E,iFAYdC,KAAKtC,Y,+BA2DL,OACI,yBAAK3B,UAAU,aAEX,4BAAQkE,IAAI,SAAU5D,MAAO,CAAC6D,aAAa,OAAQzB,MAAyB,GAAlBd,OAAOU,WAAgBK,OAA2B,GAAnBf,OAAOW,YAAiB6B,QAASH,KAAKd,qB,GA5ExGkB,cCGxB,SAASC,EAAQvE,GAAQ,IAAD,EAEZwE,mBAAS,IAFG,mBAE5BC,EAF4B,KAEvBC,EAFuB,OAGZF,mBAAS,IAHG,mBAG5BrD,EAH4B,KAGvBwD,EAHuB,OAIVH,mBAAS,SAJC,mBAI5B/D,EAJ4B,KAItBmE,EAJsB,KAqCnC,OACI,yBAAK3E,UAAU,WACX,yBAAKA,UAAU,kBACX,4BAAQE,GAAG,cAAc0E,SAAU,SAACC,GAAKJ,EAAQI,EAAErB,OAAOsB,QAAS9E,UAAU,iBACzE,wCAAQA,UAAU,QAAQ8E,MAAM,GAAGC,UAAQ,EAACC,UAAQ,EAACC,QAAM,GAA3D,YAAsE,cAAtE,iBACA,4BAAQjF,UAAU,QAAQ8E,MAAM,WAAhC,WACA,4BAAQ9E,UAAU,QAAQ8E,MAAM,YAAhC,YACA,4BAAQ9E,UAAU,QAAQ8E,MAAM,WAAhC,aAIR,yBAAK9E,UAAU,kBAAiB,2BAAOkF,UAAU,IAAIN,SAAU,SAACC,GAAKH,EAAQG,EAAErB,OAAOsB,QAASK,YAAY,YAAYnF,UAAU,6BAA6BoF,KAAK,UAE/J,yBAAKpF,UAAU,gBAIX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,mBAAf,qBACA,yBAAKA,UAAU,cAAcM,MAAO,CAACC,gBAAgBC,MAGzD,kBAAC,EAAD,CAAWyC,YA1BR,SAACC,GAChByB,EAASzB,OA4BL,yBAAKlD,UAAU,yBACX,kBAAC,IAAD,CAAMC,GAAG,KACL,4BAAQmE,QA1DP,WAEb,IADA,IAAIiB,GAAQ,EACJzE,EAAE,EAAGA,EAAEb,EAAMuF,KAAK5E,OAAOE,IAC7B,GAAGb,EAAMuF,KAAK1E,GAAGM,MAAQA,EAAK,CAC1BmE,GAAQ,EACR,MAGLA,EACCE,MAAM,gDAEQ,KAATrE,EAGS,KAATsD,EAITzE,EAAMyF,eAAehB,EAAKtD,EAAKV,GAH3B+E,MAAM,6BAHNA,MAAM,0CA8C8BvF,UAAU,oBAAtC,a,YCrEL,SAASyF,EAAa1F,GAKjC,OACI,yBAAKC,UAAW,gBACZ,4BAAQA,UAAU,eAAeoE,QALrB,WAChBrE,EAAM2F,kBAAkB,YAIpB,iB,MCNG,SAASC,EAAa5F,GAAQ,IAAD,EAEHwE,mBAAS,IAFN,mBAEjCqB,EAFiC,KAErBC,EAFqB,KA6CxC,OACI,yBAAK7F,UAAU,eACX,4BAAQkB,KAAK,SAAS0D,SA1CT,SAACC,GAClBgB,EAAehB,EAAErB,OAAOsB,QAyC0B5E,GAAG,eAAeF,UAAU,gBACtE,4BAAQ8E,MAAM,GAAGC,UAAQ,EAACC,UAAQ,EAACC,QAAM,GAAzC,iBACA,4BAAQH,MAAM,gBAAd,gBACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,gBAAd,iBAEJ,4BAAQ9E,UAAU,kBAAkBoE,QAjCxB,WAChB,MAAkB,IAAfwB,GACCL,MAAM,sCACNxF,EAAM2F,kBAAkB,QAEnB3F,EAAM+F,QAAQC,QAAQrF,OAAS,GACpC6E,MAAM,wDACNxF,EAAM2F,kBAAkB,QAEH,iBAAhBE,GAAyD,aAAvB7F,EAAM+F,QAAQtB,MACrDe,MAAM,8DACNxF,EAAM2F,kBAAkB,QAxBR,WAEpB,IADA,IAAIM,EAAO,EACHpF,EAAE,EAAGA,EAAGb,EAAM+F,QAAQC,QAAQrF,OAAOE,IACF,WAApCb,EAAM+F,QAAQC,QAAQnF,GAAGqF,QACxBD,IAGR,OAAGA,EAAQ,EAmBFE,IAAuC,WAAhBN,GAC5BL,MAAM,qDACNxF,EAAM2F,kBAAkB,SAGxB3F,EAAMoG,UAAUP,QAChB7F,EAAM2F,kBAAkB,UAcxB,Q,MCvDG,SAASU,EAAUrG,GAuB9B,OACI,yBAAKC,UAAU,aACX,4BAAQoE,QAfJ,SAACS,GACT9E,EAAMsG,MAAMtG,EAAMwB,QAcUvB,UAAU,eAAeM,MAAO,CAACC,gBAtB1DR,EAAM+F,QAAQQ,OACN,QAEA,MAmBkFrF,UAV1FlB,EAAM+F,QAAQQ,OACN,mCAEA,sCAOgHvG,EAAM+F,QAAQG,SCrBlI,SAASM,EAAKxG,GAAQ,IAAD,EAEDwE,mBAAS,OAFR,mBAEzBiC,EAFyB,KAEhBC,EAFgB,KAI1BN,EAAU,SAACP,GACb7F,EAAMoG,UAAUP,EAAY7F,EAAMwB,QAShC8E,EAAO,SAACzF,GACVb,EAAMsG,MAAMtG,EAAMwB,MAAMX,IAGtB8E,EAAoB,SAACgB,GACvBD,EAAYC,IAGhB,OACI,yBAAK1G,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,mBACX,8BAAM,0BAAMA,UAAU,WAAhB,cAAN,IAAmD,KAAKD,EAAM4G,QAAQzF,MACtE,8BAAM,0BAAMlB,UAAU,WAAhB,cAAN,IAAmD,KAAKD,EAAM4G,QAAQnC,QAI9E,yBAAKxE,UAAU,gBACVD,EAAM4G,QAAQZ,QAAQ1E,KAAI,SAACC,EAAQV,GAChC,OAAO,kBAAC,EAAD,CAAWyF,MAAOA,EAAO9E,MAAOX,EAAGkF,QAASxE,SA1BnD,QAAbkF,EACQ,kBAAC,EAAD,CAAcd,kBAAmBA,IACrB,WAAbc,EACC,kBAAC,EAAD,CAAcd,kBAAmBA,EAAmBI,QAAS/F,EAAM4G,QAASR,UAAWA,SAD5F,GCyBCS,MAlCf,WAAgB,IAAD,EAEkBrC,mBAAS,IAF3B,mBAENnD,EAFM,KAEGyF,EAFH,KAIPrB,EAAiB,SAAChB,EAAKtD,EAAKV,GAChCqG,EAAY,GAAD,mBAAKzF,GAAL,CAAc,CAACoD,KAAKA,EAAKtD,KAAKA,EAAKV,MAAMA,EAAMH,KAAK,SAASa,EAAK6E,QAAQ,QAEjFI,EAAU,SAACP,EAAYhF,GAC3BQ,EAASR,GAAGmF,QAAZ,sBAA0B3E,EAASR,GAAGmF,SAAtC,CAA8C,CAACE,OAAOL,EAAYU,QAAO,KACzEO,EAAY,YAAIzF,KAEZiF,EAAQ,SAACS,EAAUC,GACvB3F,EAAS0F,GAAWf,QAAQgB,GAAaT,QAAUlF,EAAS0F,GAAWf,QAAQgB,GAAaT,OAC5FO,EAAY,YAAIzF,KAIlB,OACE,yBAAKpB,UAAU,OAEb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgH,OAAK,EAAC3G,KAAK,IAAI4G,UAAW,WAAK,OAAO,kBAAC,EAAD,CAAU7F,SAAUA,OACjE,kBAAC,IAAD,CAAO4F,OAAK,EAAC3G,KAAK,WAAW4G,UAAW,WAAK,OAAO,kBAAC,EAAD,CAAS3B,KAAMlE,EAAUoE,eAAgBA,OAC5FpE,EAASC,KAAI,SAACC,EAAQV,GACrB,OAAQ,kBAAC,IAAD,CAAOoG,OAAK,EAAC3G,KAAMiB,EAAQjB,KAAM4G,UAAW,WAAK,OAAO,kBAAC,EAAD,CAAMZ,MAAOA,EAAO9E,MAAOX,EAAGuF,UAAWA,EAAWQ,QAASrF,cCtBrH4F,QACW,cAA7BtF,OAAOC,SAASsF,UAEe,UAA7BvF,OAAOC,SAASsF,UAEhBvF,OAAOC,SAASsF,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dafe5ef9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Title.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Title(props) {\r\n    \r\n    return (\r\n        <div className='Title'>\r\n            <Link to='/'><button id='homeBtn'>Smart House </button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './RoomBtn.css'\r\n\r\nexport default function RoomBtn(props) {\r\n\r\n    const fontColor=()=>{\r\n        let color = ','+ props.roomValue.color.slice(4,props.roomValue.color.length-1);\r\n        let rgb = [];\r\n        for(let i= 0; i < 3;i++){\r\n            let temp = parseInt(color.slice(color.lastIndexOf(',')+1,color.length));\r\n            color = color.slice(0,color.lastIndexOf(','));\r\n            rgb = [temp,...rgb];\r\n        }\r\n        if((rgb[0]+rgb[1]+rgb[2]) < 380){\r\n            return 'white';\r\n        }else{\r\n            return 'black';\r\n        }\r\n        //,x,y,z\r\n    }\r\n    const shadowBoxColor=()=>{\r\n        return '1px 1px 3px 1px '+props.roomValue.color;\r\n    }\r\n\r\n    return (\r\n        <div className='RoomBtn'>\r\n            <Link to={props.roomValue.path} ><button style={{backgroundColor:props.roomValue.color,color:fontColor(),boxShadow:shadowBoxColor()}} className='roomBtn'>{props.roomValue.name}</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './ExistingRooms.css'\r\nimport RoomBtn from './RoomBtn'\r\n\r\n\r\nexport default function ExistingRooms(props) {\r\n    return (\r\n        <div className='ExistingRooms'>\r\n            {props.roomList.map((element,i)=>{\r\n            return <RoomBtn index={i} roomValue={element}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './PlusBtn.css'\r\n\r\nexport default function PlusBtn() {\r\n    return (\r\n        <div className='PlusBtn'>\r\n            <Link to='/addroom'><button className='bigPlus'>+</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ExistingRooms from './ExistingRooms'\r\nimport './HomePage.css'\r\nimport PlusBtn from './PlusBtn'\r\n\r\nexport default function HomePage(props) {\r\n\r\n    return (\r\n        <div className='HomePage'>\r\n            <div className='roomsOnDisplay'>\r\n                <ExistingRooms roomList={props.roomList}/>\r\n            </div>\r\n            <div className='plsBtn'>\r\n                <PlusBtn />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport './ColorPick.css'\r\nimport { Component } from 'react';\r\n\r\nexport default class ColorPick extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            \r\n            \r\n        }\r\n    }\r\n    // const [chosenPixel,setChosenPixel]= useState('');\r\n    // const [toRender,setToRender] = useState('btn');\r\n\r\n    componentDidMount() {\r\n       \r\n        this.animate();      \r\n    }\r\n    //  /addroom\r\n    animate = ()=>{\r\n        if(window.location.href.slice((window.location.href.length-8),window.location.href.length) === '/addroom'){\r\n            requestAnimationFrame(this.animate);\r\n            this.createCanvas();\r\n        }\r\n        \r\n    }\r\n    createCanvas =()=>{\r\n        \r\n    let canvas = this.refs.canvas\r\n    let ctx = canvas.getContext(\"2d\")\r\n    ctx.clearRect(0,0,window.innerWidth,window.innerHeight);\r\n    let x = 0.6*window.innerWidth;\r\n    let y = 0.1*window.innerHeight;\r\n    canvas.width = x;\r\n    canvas.height =y;\r\n    let grd = ctx.createLinearGradient(0,0,x,y);\r\n    grd.addColorStop(0, \"black\");//1\r\n    grd.addColorStop(0.05, \"grey\");//1\r\n    grd.addColorStop(0.1, \"brown\");//1\r\n    grd.addColorStop(0.2, \"pink\");//1\r\n    grd.addColorStop(0.3, \"red\");//1\r\n    grd.addColorStop(0.4, \"orange\");//1\r\n    grd.addColorStop(0.5, \"yellow\");//1\r\n    grd.addColorStop(0.6, \"green\");//1\r\n    grd.addColorStop(0.7, \"rgb(42,56,108)\");//1\r\n    grd.addColorStop(0.8, \"purple\");//1\r\n    grd.addColorStop(0.9, \"blue\");//1\r\n    grd.addColorStop(1, \"white\");//9\r\n    ctx.fillStyle = grd;\r\n    ctx.fillRect(0,0,x,y);\r\n      }\r\n\r\n    \r\n    updateColor=(str)=>{\r\n        this.props.updateColor(str);\r\n    }\r\n\r\n    getPixelValue = (event)=>{\r\n        \r\n        let x = event.clientX;\r\n        let y = event.clientY;\r\n        let rect = event.target.getBoundingClientRect();\r\n        x -= rect.left;\r\n        y -= rect.top;\r\n        x = parseInt(x);\r\n        y=parseInt(y);\r\n        let pixelData = event.target.getContext('2d').getImageData(x, y, 1, 1).data;\r\n        let rgba = 'rgb('+pixelData[0]+','+pixelData[1]+','+pixelData[2]+')';\r\n        this.updateColor(rgba);\r\n        \r\n\r\n        \r\n    }\r\n \r\n    render(){\r\n        return (\r\n            <div className='ColorPick' >\r\n \r\n                <canvas ref=\"canvas\"  style={{borderRadius:'5px'}} width={window.innerWidth*0.6} height={window.innerHeight*0.1} onClick={this.getPixelValue}/>\r\n                \r\n \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React from 'react'\r\nimport './AddRoom.css'\r\nimport {Link} from 'react-router-dom'\r\nimport { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ColorPick from './ColorPick'\r\n\r\n\r\nexport default function AddRoom(props) {\r\n\r\n    const [room,setRoom] = useState('');\r\n    const [name,setName] = useState('');\r\n    const [color,setColor] = useState('white');\r\n\r\n    const addToList =()=>{\r\n        let found = false;\r\n        for(let i=0; i<props.list.length;i++){\r\n            if(props.list[i].name == name){\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if(found){\r\n            alert('ERROR: a room under that name already exists');\r\n            return;\r\n        }else if(name === ''){\r\n            alert('ERROR: a name to the room is required');\r\n            return;\r\n        }else if(room === ''){\r\n            alert('ERROR: must select a room');\r\n            return;\r\n        }\r\n        props.addToRoomsList(room,name,color);\r\n    }\r\n    const colorChange=(e)=>{\r\n        if(e.target.value === ''){\r\n            setColor('white');\r\n        }else{\r\n            setColor(e.target.value)\r\n        }\r\n    }\r\n    const updateColor =(str)=>{\r\n        setColor(str);\r\n    }\r\n\r\n    return (\r\n        <div className='AddRoom'>\r\n            <div className='addRoomWrapper'>\r\n                <select id='selectInput' onChange={(e)=>{setRoom(e.target.value)}} className='standratInput'>\r\n                    <option className='opTag' value=\"\" disabled selected hidden className='ChooseRoom'>Choose a room</option>\r\n                    <option className='opTag' value=\"Bedroom\">Bedroom</option>\r\n                    <option className='opTag' value=\"Bathroom\">Bathroom</option>\r\n                    <option className='opTag' value=\"Kitchen\">Kitchen</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className='addRoomWrapper'><input maxLength='5' onChange={(e)=>{setName(e.target.value)}} placeholder='Room name' className='standratInput addRoomInput' type=\"text\"/></div>\r\n            \r\n                <div className='colorWrapper'>\r\n                {/* <input onChange={colorChange} placeholder='Color' className='standratInput addRoomInput' type=\"color\"/> */}\r\n                \r\n                \r\n                    <div className='colorSecondRow'>\r\n                        <div className='pickedColorText'>Choose your color</div>\r\n                        <div className='pickedColor' style={{backgroundColor:color}}></div>\r\n                        \r\n                    </div>\r\n                    <ColorPick updateColor={updateColor}/>\r\n                </div>\r\n                \r\n            <div className='addRoomWrapper btnDiv'>\r\n                <Link to='/'>\r\n                    <button onClick={addToList} className='addRoomCreateBtn'>Create</button>\r\n                </Link>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport './AddDeviceBtn.css'\r\n\r\nexport default function AddDeviceBtn(props) {\r\n\r\n    const changeRender= ()=>{\r\n        props.changeRenderState('select')\r\n    }\r\n    return (\r\n        <div className ='AddDeviceBtn'>\r\n            <button className='addDeviceBtn' onClick={changeRender}>Add a Device</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './SelectDevice.css'\r\nimport { useState } from 'react';\r\n\r\nexport default function SelectDevice(props) {\r\n\r\n    const [deviceToAdd,setDeviceToAdd] = useState('');\r\n    \r\n\r\n    const updateDevice = (e)=>{\r\n        setDeviceToAdd(e.target.value);\r\n    }\r\n    const moreThanOneStereo=()=>{\r\n        let count =0;\r\n        for(let i=0; i <props.content.devices.length;i++){\r\n            if(props.content.devices[i].device === 'Stereo'){\r\n                count++;\r\n            }\r\n        }\r\n        if(count > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    const chageRender = ()=>{\r\n        if(deviceToAdd == ''){\r\n            alert('ERROR: no device was selected');\r\n            props.changeRenderState('btn');\r\n            return;\r\n        }else if(props.content.devices.length > 4){\r\n            alert('ERROR: maximum of 5 devices per room is allowed');\r\n            props.changeRenderState('btn');\r\n            return;\r\n        }else if(deviceToAdd === 'Water heater' && props.content.room !== 'Bathroom'){\r\n            alert('ERROR: a water heater can only be added in a bathroom');\r\n            props.changeRenderState('btn');\r\n            return;\r\n        }else if(moreThanOneStereo() && deviceToAdd === 'Stereo'){\r\n            alert('ERROR: every room must have 1 stereo at most');\r\n            props.changeRenderState('btn');\r\n            return;\r\n        }else{\r\n            props.addDevice(deviceToAdd);\r\n            props.changeRenderState('btn');\r\n            return;\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className='SelecDevice' >\r\n            <select name=\"device\" onChange={updateDevice} id=\"deviceSelect\" className='selectDevice'>\r\n                <option value=\"\" disabled selected hidden>Select Device</option>\r\n                <option value=\"Air conditor\">Air conditor</option>\r\n                <option value=\"Lights\">Lights</option>\r\n                <option value=\"Stereo\">Stereo</option>\r\n                <option value=\"Water heater\">Water heater</option>\r\n            </select>\r\n            <button className='selectDeviceBtn' onClick={chageRender}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './DeviceBtn.css'\r\n\r\nexport default function DeviceBtn(props) {\r\n\r\n    const activityColor=()=>{\r\n        if(props.content.active){\r\n            return 'green';\r\n        }else{  \r\n            return 'red';\r\n        }\r\n    }\r\n\r\n    const onOff=(e)=>{\r\n        props.onOff(props.index);\r\n    }\r\n\r\n    const shadowBoxColor=()=>{\r\n        if(props.content.active){\r\n            return '1px 1px 3px 1px rgb(10, 182, 19)';\r\n        }else{\r\n            return '1px 1px 3px 1px rgb(182, 10, 62) '; \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='DeviceBtn'>\r\n            <button onClick={onOff} className='deviceActive' style={{backgroundColor:activityColor(),boxShadow:shadowBoxColor()}}>{props.content.device}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Room.css'\r\nimport { useState } from 'react'\r\nimport AddDeviceBtn from './AddDeviceBtn'\r\nimport SelectDevice from './SelectDevice'\r\nimport DeviceBtn from './DeviceBtn'\r\n\r\nexport default function Room(props) {\r\n\r\n    const [toRender,setToRender] = useState('btn')\r\n\r\n    const addDevice=(deviceToAdd)=>{\r\n        props.addDevice(deviceToAdd,props.index);\r\n    }\r\n    const showLowerPart=()=>{\r\n        if(toRender === 'btn'){\r\n            return <AddDeviceBtn changeRenderState={changeRenderState}/>\r\n        }else if (toRender === 'select'){\r\n            return <SelectDevice changeRenderState={changeRenderState} content={props.roomVal} addDevice={addDevice} />\r\n        }\r\n    }\r\n    const onOff= (i) =>{\r\n        props.onOff(props.index,i);\r\n    }\r\n\r\n    const changeRenderState = (newRender)=>{\r\n        setToRender(newRender);\r\n    }\r\n\r\n    return (\r\n        <div className='Room' >\r\n            <div className='upperPart'>\r\n                <div className='description'>\r\n                    <div className='descriptionText'>\r\n                        <span><span className='preInfo'>Room Name:</span> {'  '+props.roomVal.name}</span> \r\n                        <span><span className='preInfo'>Room Type:</span> {'  '+props.roomVal.room}</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='deviceStates'>\r\n                    {props.roomVal.devices.map((element,i)=>{\r\n                        return <DeviceBtn onOff={onOff} index={i} content={element}/>\r\n                    })}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {showLowerPart()}\r\n        </div>\r\n    )\r\n}\r\n","import React ,{useState} from 'react';\nimport {HashRouter as Router,Switch,Route} from 'react-router-dom'\nimport './App.css';\nimport Title from './components/Title'\nimport HomePage from './components/HomePage'\nimport AddRoom from './components/AddRoom'\nimport Room from './components/Room'\n\nfunction App() {\n  \n  const [roomList,setRoomList] = useState([]);\n  \n  const addToRoomsList = (room,name,color)=>{\n    setRoomList([...roomList,{room:room,name:name,color:color,path:'/room/'+name,devices:[]}]);\n  }\n  const addDevice=(deviceToAdd,i)=>{\n    roomList[i].devices = [...roomList[i].devices,{device:deviceToAdd,active:false}];\n    setRoomList([...roomList]);\n  }\n  const onOff = (roomIndex,deviceIndex)=>{\n    roomList[roomIndex].devices[deviceIndex].active = !roomList[roomIndex].devices[deviceIndex].active;\n    setRoomList([...roomList]);\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* <Title/> */}\n      <Router>\n      <Title/>\n        <Switch>\n          <Route exact path='/' component={()=>{return <HomePage roomList={roomList}/>}} />\n          <Route exact path='/addroom' component={()=>{return <AddRoom list={roomList} addToRoomsList={addToRoomsList}/>}} />\n          {roomList.map((element,i)=>{\n            return (<Route exact path={element.path} component={()=>{return <Room onOff={onOff} index={i} addDevice={addDevice} roomVal={element}/>}}/>)\n          })}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}